name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags (e.g., v1.0.0)

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: linux
            file_extension: ''
          - os: windows-latest
            artifact_name: windows
            file_extension: '.exe'
          - os: macos-latest
            artifact_name: macos
            file_extension: ''

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo apt-get update
          sudo apt-get install -y ffmpeg
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          brew install ffmpeg
        fi

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: |
        pyinstaller --onefile --name anime-downloader${{ matrix.file_extension }} downloader.py

        # Verify the executable was created
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          if [ ! -f "dist/anime-downloader.exe" ]; then
            echo "Executable not found!"
            ls -la dist/
            exit 1
          fi
        else
          if [ ! -f "dist/anime-downloader" ]; then
            echo "Executable not found!"
            ls -la dist/
            exit 1
          fi
          # Make the binary executable
          chmod +x dist/anime-downloader

    - name: Create DMG (macOS only)
      if: runner.os == 'macOS'
      run: |
        brew install create-dmg
        # Create app bundle structure
        mkdir -p "Anime Downloader.app/Contents/MacOS"
        mkdir -p "Anime Downloader.app/Contents/Resources"

        # Copy the binary
        cp dist/anime-downloader "Anime Downloader.app/Contents/MacOS/"

        # Create Info.plist
        cat > "Anime Downloader.app/Contents/Info.plist" <<EOL
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>anime-downloader</string>
            <key>CFBundleIconFile</key>
            <string>AppIcon</string>
            <key>CFBundleIdentifier</key>
            <string>com.anime.downloader</string>
            <key>CFBundleInfoDictionaryVersion</key>
            <string>6.0</string>
            <key>CFBundleName</key>
            <string>Anime Downloader</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0.0</string>
            <key>CFBundleVersion</key>
            <string>1.0.0</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.13.0</string>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>
        EOL

        # Create DMG
        create-dmg \
          --volname "Anime Downloader" \
          --volicon "Anime Downloader.app/Contents/Resources/AppIcon.icns" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "Anime Downloader.app" 200 190 \
          --hide-extension "Anime Downloader.app" \
          --app-drop-link 600 185 \
          "anime-downloader.dmg" \
          "Anime Downloader.app/"

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: anime-downloader-${{ matrix.artifact_name }}
        path: |
          dist/*
          *.dmg
        if-no-files-found: error
        retention-days: 5

  create-release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ github.ref_name }}
        body: |
          ## What's Changed
          - New release ${{ github.ref_name }}

          ### Downloads
          - **Windows**: `anime-downloader.exe`
          - **macOS**: `anime-downloader.dmg`
          - **Linux**: `anime-downloader`
        draft: false
        prerelease: false
        files: |
          artifacts/anime-downloader-windows/anime-downloader.exe
          artifacts/anime-downloader-macos/anime-downloader
          artifacts/anime-downloader-macos/anime-downloader.dmg
          artifacts/anime-downloader-linux/anime-downloader
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
